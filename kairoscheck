#!/usr/bin/python3
import pycurl, json, urllib.parse, unittest
from io import BytesIO
class C(object):
 pass

PREFIX = 'https://localhost:443/'
context = C()


def httpsget(url):
   buffer = BytesIO()
   c = pycurl.Curl()
   c.setopt(c.URL, url)
   c.setopt(pycurl.SSL_VERIFYPEER, 0)   
   c.setopt(pycurl.SSL_VERIFYHOST, 0)
   #c.setopt(c.VERBOSE, True)
   c.setopt(c.WRITEDATA, buffer)
   c.perform()
   c.close()
   body = buffer.getvalue()
   return body.decode('utf-8')

def setuser(user):
   context.user = user
   getsettings()

def getsettings():
   url =  PREFIX + 'getsettings' + '?user=' + context.user
   context.settings = json.loads(httpsget(url))['data']['settings']

def updatesettings():
   url =  PREFIX + 'updatesettings' + '?user=' + context.user + '&' + urllib.parse.urlencode(context.settings)
   return json.loads(httpsget(url))

def getnode(path):
   params = dict(nodesdb=context.settings['nodesdb'], id=0, dhxr1504339352139=1)
   url =  PREFIX + 'gettree' + '?' + urllib.parse.urlencode(params)
   nid = json.loads(httpsget(url))[0]['id']
   for x in path[1:].split('/'):
      found = False
      if x:
         params = dict(nodesdb=context.settings['nodesdb'], id=nid, dhxr1504339352139=1)
         url =  PREFIX + 'gettree' + '?' + urllib.parse.urlencode(params)
         for y in json.loads(httpsget(url))[0]['items']:
            if y['text'] == x:
               found = True
               nid = y['id']
      if not found:
         raise Exception("'" + path + "' doesn't exist in repository!")
   params = dict(nodesdb=context.settings['nodesdb'], id=nid)
   url =  PREFIX + 'getnode' + '?' + urllib.parse.urlencode(params)
   result = json.loads(httpsget(url))
   if not result['success']:
      raise Exception('Exception found in getnode: ' + result['message'])
   context.curnode = result['data']

def clearcollectioncache():
   params = dict(nodesdb=context.settings['nodesdb'], systemdb=context.settings['systemdb'], id=context.curnode['id'], logging=context.settings['logging'])
   url =  PREFIX + 'clearcollectioncache' + '?' + urllib.parse.urlencode(params)
   result = json.loads(httpsget(url))
   if not result['success']:
      raise Exception('Exception found in clearcollectioncache: ' + result['message'])

def dropcollectioncache(collection):
   params = dict(nodesdb=context.settings['nodesdb'], systemdb=context.settings['systemdb'], id=context.curnode['id'], logging=context.settings['logging'], collection=collection)
   url =  PREFIX + 'dropcollectioncache' + '?' + urllib.parse.urlencode(params)
   result = json.loads(httpsget(url))
   if not result['success']:
      raise Exception('Exception found in dropcollectioncache: ' + result['message'])

def buildcollectioncache(collection):
   params = dict(nodesdb=context.settings['nodesdb'], systemdb=context.settings['systemdb'], id=context.curnode['id'], logging=context.settings['logging'], collection=collection, arrayinsert=context.settings['arrayinsert'])
   url =  PREFIX + 'buildcollectioncache' + '?' + urllib.parse.urlencode(params)
   result = json.loads(httpsget(url))
   if not result['success']:
      raise Exception('Exception found in buildcollectioncache: ' + result['message'])

def buildallcollectioncaches():
   params = dict(nodesdb=context.settings['nodesdb'], systemdb=context.settings['systemdb'], id=context.curnode['id'], logging=context.settings['logging'], arrayinsert=context.settings['arrayinsert'])
   url =  PREFIX + 'buildallcollectioncaches' + '?' + urllib.parse.urlencode(params)
   result = json.loads(httpsget(url))
   if not result['success']:
      raise Exception('Exception found in buildallcollectioncaches: ' + result['message'])

def getcollections():
   params = dict(nodesdb=context.settings['nodesdb'], id=context.curnode['id'], logging=context.settings['logging'])
   url =  PREFIX + 'getcollections' + '?' + urllib.parse.urlencode(params)
   result = json.loads(httpsget(url))
   if not result['success']:
      raise Exception('Exception found in getcollections: ' + result['message'])
   return sorted([x['label'] for x in result['data']])

def displaycollection(collection):
   params = dict(nodesdb=context.settings['nodesdb'], systemdb=context.settings['systemdb'], id=context.curnode['id'], logging=context.settings['logging'], arrayinsert=context.settings['arrayinsert'], collection=collection)
   url =  PREFIX + 'displaycollection' + '?' + urllib.parse.urlencode(params)
   result = json.loads(httpsget(url))
   if not result['success']:
      raise Exception('Exception found in displaycollection: ' + result['message'])
   return result['data']

def displayallcollections():
   for c in getcollections():
      print('*** Collection: ' + c)
      try: print(json.dumps(displaycollection(c), indent=4, sort_keys=True))
      except: pass

def f(x,y,z):
   class x(unittest.TestCase):
      def test(self):
         setuser(y)
         getnode(z)
         clearcollectioncache()
         buildallcollectioncaches()
         displayallcollections()
   return x

x = f('Test1', 'examples', '/NONREG/ANALYZERS/ANALBO/1')

unittest.main()

